'''
Este modulo tiene como fin cosntruir la base de datos en caso de que el programa no encuentre la base de datos.
'''
#Script utrilizado para allar la ubicaciÃ³n absoluta de cualquier modulo o carpeta que solucitemos con el fin de evitar importaciÃ³n circular.
import sys, os
actual_dir = os.path.dirname(os.path.abspath(__file__))
principal_dir = os.path.join(actual_dir, '..')
sys.path.append(principal_dir)


#Importamos funciones utiles para la validaciÃ³n de elecciones
from funtions.funciones import validation, int_validatiÃ³n

#Importamso las clases para poder utilizarlas durante la contrucciÃ³n de la base de datos.
from Class.pokeclases import Pokemon, Fuego, Agua, Planta, Electrico, Psiquico, Siniestro, Fantasma, Lucha, Volador, Bicho, Roca, Normal, Ataque
from Class.rutas import PokeRutas


#Lista de tipos
tipos = [Fuego, Agua, Planta, Electrico, Psiquico, Siniestro, Fantasma, Lucha, Volador, Bicho, Roca, Normal]

#Array donde se guardan los pokemons, los ataques, las rutas, los gimnasios y los pueblos.
pokes = []
ataques = []
rutas = []
pubs = []

'''
Estas funciones tienen como fin crear los objetos que vamos a mete rne la base de datos (crear nuestra base de datos en caso de que no la tengamos)
'''
#CreaciÃ³n de ataques
def atq_constructor(atq, tipos):
    print('SE HA INICIALIZADO EL CREADOR DE ATAQUESðŸ’»')
    elec = validation(int_validatiÃ³n('Cuantos ataques quiere poner de cada tipo?\n>>>'), 1, 100)
    for i in range(len(tipos)*elec):
        name = input(f'Diga el nombre del ataque nro {i+1}: ')
        cc = 1
        print('ðŸŒ€TIPOSðŸŒ€'.center(125))
        for i in tipos:
            print(f'{cc}. {i.show(i)}')
            cc+=1
        elec2 = validation(int_validatiÃ³n('Escriba del nÃºmero del tipo de ataque que sea: '), 1, len(tipos)) 
        type = tipos[elec2-1]
        dmg = validation(int_validatiÃ³n(f'Cuanto daÃ±o hace el ataque {name}?: '), 10, 125)
        elec3 = validation(int_validatiÃ³n('Su ataque es de tipo\n>1. Especial\n>2. FÃ­sico\n>>>'), 1, 2)
        if elec3 == 1:
            ty_dmg = 'Especial'
        else:
            ty_dmg = 'Fisico'
        x = Ataque(name, type, dmg, ty_dmg)
        atq.append(x)
        os.system('clear')
        print(f'Su ataque {x.get_name()} se agrego exitosamente...')
    print('ATAQUES CREADOS EXITOSAMENTEâœ…...')
    return atq


#CreaciÃ³n de pokemones (instancias).
def poke_constr(pokemons, tipos):
    print('SE HA INICIALIZADO EL CREADOR DE POKEMONESðŸ’»')
    elec = validation(int_validatiÃ³n('Cuantos pokemons quiere poner de cada tipo?\n>>>'), 1, 100)
    for i in range(len(tipos)*elec):
        name = input(f'Diga el nombre del pokemon nro {i}: ')
        def_fis = validation(int_validatiÃ³n(f'Cuanta es la defensa fÃ­sica de {name}: '), 1, 100)
        def_esp = validation(int_validatiÃ³n(f'Cuanta es la defensa especial de {name}: '), 1, 100)
        atq_fis = validation(int_validatiÃ³n(f'Cuanta es el ataque fÃ­sico de {name}: '), 1, 100)
        atq_esp = validation(int_validatiÃ³n(f'Cuanta es el ataque especial de {name}: '), 1, 100)
        vel = validation(int_validatiÃ³n(f'Cuanta es la velocidad de {name}: '), 1, 100)
        os.system('clear')
        cc = 1
        print('ðŸŒ€TIPOSðŸŒ€'.center(125))
        for i in tipos:
            print(f'{cc}. {i}')
        elec2 = validation(int_validatiÃ³n('Diga el nÃºmero del tipo del pokemon: '), 1, len(tipos))
        elec3 = validation(int_validatiÃ³n('Diga el nÃºmero del segundo tipo del pokemon (si no tiene, escriba 0): '), 0, len(tipos))
        if elec3 > 0:
            x = Pokemon(name, 100, def_fis, def_esp, atq_fis, atq_esp, vel, [tipos[elec2], tipos[elec3]])
        else:
            x = Pokemon(name, 100, def_fis, def_esp, atq_fis, atq_esp, vel, [tipos[elec2]])
        print(f'El pokemon {x.nombre} se agrego exitosamente...')
    print('POKEMONES CREADOS EXITOSAMENTEâœ…...')
    return pokemons


#Creador de rutas
def rut_constr(rutas):
    print('SE HA INICIALIZADO EL CREADOR DE RUTASðŸ’»')
    for i in range(0):
        x = PokeRutas([], i+1)
        rutas.append(x)
    print('RUTAS CREADAS EXITOSAMENTEâœ…...')


#Creador de pueblos.
def pub_constr(pueblos):
    print('SE HA INICIALIZADO EL CREADOR DE PUEBLOS ðŸ’»')
    print('PUEBLOS CREADOS EXITOSAMENTEâœ…...')
    pass


'''
Estas funciones tienen como fin meter la sinstancias que creamso en nuestra base de datos, inicializandola.
'''
#Estructura de los ataques en la base de datos.
def atq_db_structure(atq):
    with open('Db//db_atq', 'w', encoding='UTF-8') as data:
        for i in atq:
            data.write(f'{i.name};{i.type.show(i.type)};{i.damage};{i.damage_type}\n')

#Estructura de los pokemons en la base de datos.
def poke_db_structure(pokemons):
    with open('Db//db_poke', 'w', encoding='UTF-8') as data:
        for i in pokemons:
            data.write(f'{i.nombre};{i.stats};{i.tipo.show(i.tipo)};{i.ataques};{i.batallas_ganadas};{i.ps_max}\n')
   
#Estructura de las rutas en la base de datos.
def rut_db_structure(rut):
    with open('Db//db_rutas', 'w', encoding= 'UTF-8') as data:
        for i in rut:
            data.write(f'{i.pokes};{i.nro}\n')

#Estructura de los pueblos en la base de datos.
def pub_db_structure():
    pass


'''
EjecuciÃ³n del programa
'''
#EjecuciÃ³n de los constructores de la estructura de datos.
#atq_constructor(ataques, tipos)
#atq_db_structure(ataques)
poke_constr(pokes, tipos)
poke_db_structure(pokes)
rut_constr(rutas)
rut_db_structure(rutas)
#pub_constr(pubs)
#pub_db_structure(pubs)




